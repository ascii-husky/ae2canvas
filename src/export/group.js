function getGroup(data) {    if (!data) return null;    var group = {};    if (data.inPoint) group.in = Math.round(data.inPoint * 1000);    if (data.outPoint) group.out = Math.round(data.outPoint * 1000);    group.name = data.name;    //debug//    group.matchName = data.matchName;    group.items = [];    // outer loop    for (var i = 1; i <= data.numProperties; i++) {        var prop = data.property(i);        var matchName = prop.matchName;        if (prop.enabled) {            switch (matchName) {                case 'ADBE Vector Blend Mode':                    //TODO                    break;                case 'ADBE Transform Group':                case 'ADBE Vector Transform Group':                    group.transform = getVectorTransform(prop);                    break;                case 'ADBE Vector Materials Group':                    //TODO                    break;                case 'ADBE Root Vectors Group':                case 'ADBE Vectors Group':                    //inner loop                    for (var j = 1; j <= prop.numProperties; j++) {                        var innerProp = prop.property(j);                        var innerMatchName = innerProp.matchName;                        if (innerProp.enabled) {                            switch (innerMatchName) {                                case 'ADBE Vector Group':                                    group.items.unshift(getGroup(innerProp));                                    break;                                case 'ADBE Vector Shape - Group':                                    group.items.unshift(getPath(innerProp));                                    break;                                case 'ADBE Vector Shape - Rect':                                    group.items.unshift(getRect(innerProp));                                    break;                                case 'ADBE Vector Shape - Ellipse':                                    group.items.unshift(getEllipse(innerProp));                                    break;                                case 'ADBE Vector Shape - Star':                                    group.items.unshift(getPolystar(innerProp));                                    break;                                case 'ADBE Vector Graphic - Fill':                                    group.items.unshift(getFill(innerProp));                                    break;                                case 'ADBE Vector Graphic - G-Fill':                                    $.writeln('Gradients are not supported');                                    break;                                case 'ADBE Vector Graphic - Stroke':                                    group.items.unshift(getStroke(innerProp));                                    break;                                case 'ADBE Vector Filter - Merge':                                    group.items.unshift(getMerge(innerProp));                                    break;                                case 'ADBE Vector Filter - Trim':                                    group.items.unshift(getVectorTrim(innerProp));                                    break;                            } // end inner switch                        } // end if                    } // end inner                    break;            } // end outer switch        } // end if    }// end outer    return optimizeGroup(group);}function optimizeGroup(group) {//    if (group.merge && group.groups) group = removeFillAndStrokeIfMerge(group);    return group;}function removeFillAndStrokeIfMerge(group) {    for (var i = 0; i < group.groups.length; i++) {        if (group.groups[i].fill) delete group.groups[i].fill;        if (group.groups[i].stroke) delete group.groups[i].stroke;        if (group.groups[i].groups) group.groups[i] = removeFillAndStrokeIfMerge(group.groups[i]);    }    return group;}